import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import GoogleProvider from 'next-auth/providers/google';

export const authOptions = {
  providers: [
    // üëâ Credentials (email + password)
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá (MongoDB, Prisma ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø)
        // ‡¶è‡¶ñ‡¶® ‡¶°‡ßá‡¶Æ‡ßã ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶π‡¶æ‡¶∞‡ßç‡¶°‡¶ï‡ßã‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡¶ø
        if (
          credentials.email === 'test@example.com' &&
          credentials.password === '123456'
        ) {
          return { id: '1', name: 'Demo User', email: 'test@example.com' };
        }
        return null;
      },
    }),

    // üëâ Google login
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],

  // üëâ Login page override
  pages: {
    signIn: '/login',
  },

  // üëâ Session config
  session: {
    strategy: 'jwt',
  },

  // üëâ JWT config
  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
